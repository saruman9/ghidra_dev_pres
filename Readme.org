#+STARTUP: indent
#+STARTUP: noinlineimages

#+OPTIONS: reveal_mathjax:t
#+OPTIONS: reveal_slide_number:c/t
#+OPTIONS: reveal_history:t
#+OPTIONS: toc:nil
# #+OPTIONS: num:nil
#+REVEAL_HLEVEL: 2
#+REVEAL_TRANS: linear
#+REVEAL_TITLE_SLIDE:<h1>%t</h1><p>%a</p><p><a href="https://t.me/dura_lex">@dura_lex</a></p>
#+REVEAL_TITLE_SLIDE_BACKGROUND:./images/ghidra_main.png
#+REVEAL_TITLE_SLIDE_BACKGROUND_SIZE: 50%
#+REVEAL_THEME: night
#+REVEAL_EXTRA_CSS: override.css

#+TITLE: Ghidra. Dev
#+AUTHOR: Abc Xyz
#+EMAIL: @dura_lex

* Table of Contents
:PROPERTIES:
:UNNUMBERED: notoc
:END:

#+REVEAL_TOC: headlines 1

* Introduction
** About Ghidra

- Integrated environment for software reverse engineering (IDE for SRE)
- Developed by NSA Research
- Written almost entirely in Java
- Some native code (C/C++)

** Major parts
*** Programs

- ELF
- PE
- Mach-O
- COFF
- PDB
- Raw binaries
- etc

*** Project Manager

#+ATTR_HTML: :width 20%
[[./images/project_manager.png]]

*** Tools

#+ATTR_HTML: :width 30%
[[./images/tool_chest.png]]

#+REVEAL: split

#+ATTR_HTML: :width 90%
[[./images/tool.png]]

*** Plugins

#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
[[./images/plugins_configure.png]]
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
[[./images/plugins_core.png]]
#+REVEAL_HTML: </div>

*** Scripts

#+ATTR_HTML: :width 90%
[[./images/scripts.png]]

*** Server

- Multiple users work together on the same program(s)
- Network storage for the shared project
- Controls user access
- Allows files to be versioned (à la primitive Git)
- Others features

** Why use Ghidra?

- Designed to handle large data sets (not large binaries!)
- Supports collaboration
- Highly configurable environment
- Highly extensible via plugins and scripts
- Multi-platform (Linux, Mac, Windows, FreeBSD, Haiku, etc)

* IDE for developing (+Eclipse+ IntelliJ IDEA)

** Why not Eclipse

Not to my taste, but...

- GhidraDev plugin (extensions and scripts developing)
- GhidraSleighEditor plugin (Sleigh linter)

** My alternatives

#+ATTR_REVEAL: :frag (appear)
- Emacs (Eclipse backend)?
- VIM (Eclipse backend)?
- IntelliJ IDEA (Community Edition) ✓

** Integrate with Ghidra (Linux)
*** Plugins

- Use default =Skeleton= project

  Copy =Skeleton='s directory (or yours prepared extension) to needed location

#+REVEAL: split

- Create the project

  - =File= → =New= → =Project from Existing Sources...= (use Gradle model)
  - Choose the directory

#+REVEAL: split

- Set =gradle='s environment (=GHIDRA_INSTALL_DIR=)

  - Set in /Run/Debug Configurations/ (Gradle)
  - Create =gradle.properties= file and set the environment:

    #+BEGIN_SRC gradle
    GHIDRA_INSTALL_DIR = /home/user/ghidra
    #+END_SRC

#+REVEAL: split

Point to the directory of sources of Ghidra, when it will be needed

[[./images/idea_ghidra_sources.png]]

*** Scripts

- Create or use existing the =ghidra_scripts= directory
- Use existing =HelloWorldScript= script as a template

  =${GHIDRA_HOME}/Ghidra/Features/Base/ghidra_scripts/HelloWorldScript.java=

#+REVEAL: split

- Import the directory as Existing Sources without models

#+REVEAL: split

- Add Ghidra as module to the project:

  - Open Project Structure (=F4= hotkey in Project window)
  - Select Modules item
  - Import Module (select the directory of sources of Ghidra)

    #+ATTR_HTML: :width 30%
    [[./images/idea_import_module.png]]

#+REVEAL: split

- Wait while IntelliJ IDEA indexes Ghidra's files
- Add module dependencies via Context Actions

  [[./images/idea_module_dep.png]]

- Also you can add templates/snippets for scripts

** Debug

#+ATTR_REVEAL: :frag (appear)
- Run Ghidra in Debug mode

  #+BEGIN_SRC sh
  $ /opt/ghidra/support/ghidraDebug
  #+END_SRC

- Attach to Process...

  [[./images/idea_attach_to_process.png]]

- Debug a script/plugin

** Ghidra developing

#+ATTR_REVEAL: :frag (appear)
- Clone the repository

  #+BEGIN_SRC sh
  $ git clone https://github.com/NationalSecurityAgency/ghidra
  #+END_SRC

- Build Ghidra (see =DevGuide.md= for details)

  #+BEGIN_SRC sh
  $ gradle --init-script gradle/support/fetchDependencies.gradle init
  $ gradle buildGhidra
  #+END_SRC

#+REVEAL: split

- Create the project from Existing Sources (Gradle model)
#+ATTR_REVEAL: :frag (appear)
- For testing of patches or new features you can use features of IntelliJ IDEA
  or Linux tools (=sed=, =inotify=, =(bsd)tar=, etc)

#+REVEAL: split

Skip Gralde's tasks for faster building (use =-x= argument):

- =createJavadocs=
- =createJsondocs=
- =sleighCompile=
- etc

* Development

** Extension Point

Every piece (Plugins, Scripts, Analyzers, Fields, Importers, Exporters, etc) of
Ghidra is extensible!

Extensible components:
- =ExtensionPoint= interface
- List suffix in =ExtensionPoint.manifest=

** Extension source tree

#+ATTR_HTML: :width 25%
[[./images/extension_structure.png]]

*** =src=

#+BEGIN_SRC
./src
├── main
│  ├── help
│  │  └── help
│  │     ├── shared
│  │     │  └── Frontpage.css
│  │     ├── topics
│  │     │  └── skeleton
│  │     │     └── help.html
│  │     └── TOC_Source.xml
│  ├── java
│  │  └── skeleton
│  │     ├── SkeletonAnalyzer.java
│  │     ├── SkeletonExporter.java
│  │     ├── SkeletonFileSystem.java
│  │     ├── SkeletonLoader.java
│  │     └── SkeletonPlugin.java
│  └── resources
│     └── images
└── test
   └── java
#+END_SRC

#+REVEAL: split

#+BEGIN_SRC
./src/main
├── java
│  └── skeleton
│     ├── SkeletonAnalyzer.java
│     ├── SkeletonExporter.java
│     ├── SkeletonFileSystem.java
│     ├── SkeletonLoader.java
│     └── SkeletonPlugin.java
└── resources
   └── images
#+END_SRC

- Packaged into a =.jar= file
- Hold the Java/Clojure/Kotlin/JVM-based source for this extension

#+REVEAL: split

#+BEGIN_SRC
./src/test
└── java
#+END_SRC

- Unit tests are not included in the =.jar= file

#+REVEAL: split

#+BEGIN_SRC
./src/main/help
└── help
   ├── shared
   │  └── Frontpage.css
   ├── topics
   │  └── skeleton
   │     └── help.html
   └── TOC_Source.xml
#+END_SRC

- Online help for this extension
- Contains the table of contents to append
- Contains the CSS and HTML components

*** =ghidra_scripts=

#+BEGIN_SRC
./ghidra_scripts
#+END_SRC

- Holds scripts for this extension
- Unpacked as source to the file system on installation
- May provide examples to use an extension's API

*** =data=

#+BEGIN_SRC
./data
├── languages
│  ├── skel.cspec
│  ├── skel.ldefs
│  ├── skel.opinion
│  ├── skel.pspec
│  ├── skel.sinc
│  └── skel.slaspec
├── buildLanguage.xml
└── sleighArgs.txt
#+END_SRC

- Holds data files for this extension
- Will not end up inside the =.jar= file
- Will be present in the distribution =.zip= file
- Unpacked to the file system on installation

*** =lib=

#+BEGIN_SRC
./lib
#+END_SRC

- Holds external Java dependencies for this extension
- When working in IntelliJ IDEA, the contents of this directory should be added
  by Gradle's task

*** =os=

#+BEGIN_SRC
./os
├── linux64
├── osx64
└── win64
#+END_SRC

- Holds native components for this extension
- NEVER EVER USE JNI! Communicate with a native process using sockets, I/O,
  stream, etc

*** Other

#+BEGIN_SRC
.
├── build.gradle
├── extension.properties
└── Module.manifest
#+END_SRC

#+REVEAL: split

=build.gradle=

Gralde's task. No need for changes

#+REVEAL: split

=extension.properties=

#+BEGIN_SRC
name=@extname@
description=The extension description.
author=
createdOn=
version=@extversion@
#+END_SRC

#+REVEAL: split

=Module.manifest=

#+BEGIN_SRC
MODULE NAME:
MODULE DEPENDENCY:
MODULE FILE LICENSE:
EXCLUDE FROM GHIDRA JAR
DATA SEARCH IGNORE DIR:
MODULE DIR:
FAT JAR:
#+END_SRC

* API
** Flat API
** Program API

* Scripting
* Headless scripting
* Plugins
* Docking windows
* Component Provider
* Binary Formats
* Analyzers
* Loaders
* File System Loaders
* Sleigh
* Build extension
* Contributing to Ghidra
